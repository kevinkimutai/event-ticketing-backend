// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"database/sql"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  name,category_id,date,from_time,to_time,location,description,longitude,latitude,poster_url,location_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9 ,$10,$11
)
RETURNING event_id, name, category_id, date, from_time, to_time, location, description, created_at, longitude, latitude, poster_url, location_id
`

type CreateEventParams struct {
	Name        string
	CategoryID  int64
	Date        pgtype.Timestamptz
	FromTime    pgtype.Timestamptz
	ToTime      pgtype.Timestamptz
	Location    string
	Description pgtype.Text
	Longitude   float64
	Latitude    float64
	PosterUrl   string
	LocationID  int64
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Name,
		arg.CategoryID,
		arg.Date,
		arg.FromTime,
		arg.ToTime,
		arg.Location,
		arg.Description,
		arg.Longitude,
		arg.Latitude,
		arg.PosterUrl,
		arg.LocationID,
	)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.Name,
		&i.CategoryID,
		&i.Date,
		&i.FromTime,
		&i.ToTime,
		&i.Location,
		&i.Description,
		&i.CreatedAt,
		&i.Longitude,
		&i.Latitude,
		&i.PosterUrl,
		&i.LocationID,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM events
WHERE event_id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, eventID int64) error {
	_, err := q.db.Exec(ctx, deleteCompany, eventID)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT event_id, name, category_id, date, from_time, to_time, location, description, created_at, longitude, latitude, poster_url, location_id FROM events
WHERE event_id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, eventID int64) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, eventID)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.Name,
		&i.CategoryID,
		&i.Date,
		&i.FromTime,
		&i.ToTime,
		&i.Location,
		&i.Description,
		&i.CreatedAt,
		&i.Longitude,
		&i.Latitude,
		&i.PosterUrl,
		&i.LocationID,
	)
	return i, err
}

const getTotalEventsCount = `-- name: GetTotalEventsCount :one
SELECT COUNT(*) FROM events
  WHERE date > NOW() OR (date = NOW()::DATE AND to_time > NOW())
`

func (q *Queries) GetTotalEventsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalEventsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listEvents = `-- name: ListEvents :many
SELECT event_id, name, category_id, date, from_time, to_time, location, description, created_at, longitude, latitude, poster_url, location_id FROM events
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListEventsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.Name,
			&i.CategoryID,
			&i.Date,
			&i.FromTime,
			&i.ToTime,
			&i.Location,
			&i.Description,
			&i.CreatedAt,
			&i.Longitude,
			&i.Latitude,
			&i.PosterUrl,
			&i.LocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingEvents = `-- name: ListUpcomingEvents :many
SELECT event_id, name, category_id, date, from_time, to_time, location, description, created_at, longitude, latitude, poster_url, location_id 
FROM events
WHERE (date > NOW() OR (date = NOW() AND to_time > NOW()))
  AND (category_id = $3 OR $3 IS NULL)
  AND (location_id = $4 OR $4 IS NULL)
ORDER BY date, to_time
LIMIT $1 OFFSET $2
`

type ListUpcomingEventsParams struct {
	Limit      int32
	Offset     int32
	CategoryID sql.NullInt64
	LocationID sql.NullInt64
}

func (q *Queries) ListUpcomingEvents(ctx context.Context, arg ListUpcomingEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listUpcomingEvents,
		arg.Limit,
		arg.Offset,
		arg.CategoryID,
		arg.LocationID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.Name,
			&i.CategoryID,
			&i.Date,
			&i.FromTime,
			&i.ToTime,
			&i.Location,
			&i.Description,
			&i.CreatedAt,
			&i.Longitude,
			&i.Latitude,
			&i.PosterUrl,
			&i.LocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events 
  set name = $2,
  date = $3,
  from_time = $4,
  to_time = $5,
  location = $6,
  description = $7,
  longitude = $8,
  latitude = $9,
  poster_url =$10,
  location_id = $11
WHERE event_id = $1
`

type UpdateEventParams struct {
	EventID     int64
	Name        string
	Date        pgtype.Timestamptz
	FromTime    pgtype.Timestamptz
	ToTime      pgtype.Timestamptz
	Location    string
	Description pgtype.Text
	Longitude   float64
	Latitude    float64
	PosterUrl   string
	LocationID  int64
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.Exec(ctx, updateEvent,
		arg.EventID,
		arg.Name,
		arg.Date,
		arg.FromTime,
		arg.ToTime,
		arg.Location,
		arg.Description,
		arg.Longitude,
		arg.Latitude,
		arg.PosterUrl,
		arg.LocationID,
	)
	return err
}
