// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ticket-order.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTicketOrder = `-- name: CreateTicketOrder :one
INSERT INTO ticket_orders (
  attendee_id
) VALUES (
  $1
)
RETURNING order_id, payment_id, created_at, attendee_id, total_amount
`

func (q *Queries) CreateTicketOrder(ctx context.Context, attendeeID pgtype.Int8) (TicketOrder, error) {
	row := q.db.QueryRow(ctx, createTicketOrder, attendeeID)
	var i TicketOrder
	err := row.Scan(
		&i.OrderID,
		&i.PaymentID,
		&i.CreatedAt,
		&i.AttendeeID,
		&i.TotalAmount,
	)
	return i, err
}

const getTicketOrder = `-- name: GetTicketOrder :one
SELECT order_id, payment_id, created_at, attendee_id, total_amount FROM ticket_orders
WHERE order_id =$1
LIMIT 1
`

func (q *Queries) GetTicketOrder(ctx context.Context, orderID int64) (TicketOrder, error) {
	row := q.db.QueryRow(ctx, getTicketOrder, orderID)
	var i TicketOrder
	err := row.Scan(
		&i.OrderID,
		&i.PaymentID,
		&i.CreatedAt,
		&i.AttendeeID,
		&i.TotalAmount,
	)
	return i, err
}

const getTicketOrders = `-- name: GetTicketOrders :many
SELECT order_id, payment_id, created_at, attendee_id, total_amount FROM ticket_orders
LIMIT $1 OFFSET $2
`

type GetTicketOrdersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetTicketOrders(ctx context.Context, arg GetTicketOrdersParams) ([]TicketOrder, error) {
	rows, err := q.db.Query(ctx, getTicketOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketOrder
	for rows.Next() {
		var i TicketOrder
		if err := rows.Scan(
			&i.OrderID,
			&i.PaymentID,
			&i.CreatedAt,
			&i.AttendeeID,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTotalAmountOrder = `-- name: UpdateTotalAmountOrder :exec
UPDATE ticket_orders 
  set total_amount = $2
  
WHERE order_id = $1
`

type UpdateTotalAmountOrderParams struct {
	OrderID     int64
	TotalAmount pgtype.Numeric
}

func (q *Queries) UpdateTotalAmountOrder(ctx context.Context, arg UpdateTotalAmountOrderParams) error {
	_, err := q.db.Exec(ctx, updateTotalAmountOrder, arg.OrderID, arg.TotalAmount)
	return err
}
