// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: location.sql

package queries

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO location (
  name
) VALUES (
  $1
)
RETURNING location_id, name
`

func (q *Queries) CreateLocation(ctx context.Context, name string) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation, name)
	var i Location
	err := row.Scan(&i.LocationID, &i.Name)
	return i, err
}

const getLocation = `-- name: GetLocation :one
SELECT location_id, name FROM location
WHERE location_id = $1 LIMIT 1
`

func (q *Queries) GetLocation(ctx context.Context, locationID int64) (Location, error) {
	row := q.db.QueryRow(ctx, getLocation, locationID)
	var i Location
	err := row.Scan(&i.LocationID, &i.Name)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT location_id, name FROM location
ORDER BY name
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.Query(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(&i.LocationID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
