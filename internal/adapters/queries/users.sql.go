// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package queries

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name,email
) VALUES (
  $1, $2
)
RETURNING user_id, full_name, email, created_at
`

type CreateUserParams struct {
	FullName string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.FullName, arg.Email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, full_name, email, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT user_id, full_name, email, created_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByUserID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUserID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
