package pdf

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strconv"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jung-kurt/gofpdf"
	"github.com/kevinkimutai/ticketingapp/internal/adapters/queries"
	"github.com/kevinkimutai/ticketingapp/internal/utils"
	qrcode "github.com/skip2/go-qrcode"
)

type DBPort interface {
	GetOrder()
}

type PDFService struct {
}

func NewPDF() *PDFService {
	return &PDFService{}

}

const LOGO_URL = "./public/images/ADMIT.png"
const COMPANY_NAME = "ticketpass.co"
const HOST_URL = "http://localhost:8000"
const URL_ENDPOINT = "/api/v1/order"

func pdfHeader(pdf *gofpdf.Fpdf) {
	pdf.SetFont("Arial", "B", 16)

	// Add the logo to the PDF and get its dimensions
	info := pdf.RegisterImageOptions(LOGO_URL, gofpdf.ImageOptions{ReadDpi: true})

	// Set the desired width for the logo
	logoWidth := 50.0 // Adjust this value as needed

	// Calculate the height while preserving the aspect ratio
	logoHeight := info.Height() * logoWidth / info.Width()

	// Position the logo on the right side
	marginRight := 10.0
	pageWidth, _ := pdf.GetPageSize()
	logoX := pageWidth - logoWidth - marginRight
	logoY := 20.0 // Adjust as needed

	// Add the logo to the PDF
	pdf.ImageOptions(LOGO_URL, logoX, logoY, logoWidth, logoHeight, false, gofpdf.ImageOptions{ReadDpi: true}, 0, "")

	// Set font for the text
	pdf.SetFont("Arial", "B", 12)

	// Calculate the position for the text below the logo
	textX := logoX
	textY := logoY + 35 // Adjust spacing between logo and text as needed

	// Add the text below the logo
	pdf.SetXY(textX, textY)
	pdf.CellFormat(logoWidth, 5, COMPANY_NAME, "", 0, "C", false, 0, "")

	if pdf.Err() {
		log.Fatalf("Failed creating PDF report: %s\n", pdf.Error())
	}
}

func pdfAttendee(pdf *gofpdf.Fpdf, attendee queries.GetAttendeeByUserIDRow, orderID int64) {

	// Attendee Name and Order ID
	pdf.SetFont("Arial", "B", 12)
	pdf.CellFormat(20, 10, "Name: ", "", 0, "", false, 0, "")
	pdf.SetFont("Arial", "", 12)
	pdf.CellFormat(0, 10, attendee.FullName, "", 1, "", false, 0, "")

	pdf.SetFont("Arial", "B", 12)
	pdf.CellFormat(20, 10, "Order ID: ", "", 0, "", false, 0, "")
	pdf.SetFont("Arial", "", 12)
	pdf.CellFormat(0, 10, strconv.FormatInt(orderID, 10), "", 1, "", false, 0, "")

	fmt.Println(attendee.OrderID.Int64)
}

func formatDate(date pgtype.Timestamptz) string {
	dateTime := date.Time

	formattedDate := dateTime.Format("02-Jan-2006")
	return formattedDate
}

func pdfTickets(pdf *gofpdf.Fpdf, tickets []queries.GetTicketsByOrderIDRow) {

	// Tickets section
	for _, ticket := range tickets {
		// Ticket details in columns
		pdf.SetFont("Arial", "B", 12)
		pdf.CellFormat(60, 10, "Event:", "", 0, "", false, 0, "")
		pdf.CellFormat(60, 10, "Location:", "", 0, "", false, 0, "")
		pdf.CellFormat(30, 10, "Date:", "", 0, "", false, 0, "")
		pdf.Ln(6)

		pdf.SetFont("Arial", "", 12)
		pdf.CellFormat(60, 10, ticket.Name_2, "", 0, "", false, 0, "")
		pdf.CellFormat(60, 10, ticket.Location, "", 0, "", false, 0, "")
		pdf.CellFormat(30, 10, formatDate(ticket.Date), "", 1, "", false, 0, "")

		pdf.SetFont("Arial", "B", 12)
		pdf.CellFormat(60, 10, "Price:", "", 0, "", false, 0, "")
		pdf.CellFormat(60, 10, "Quantity:", "", 0, "", false, 0, "")
		pdf.CellFormat(30, 10, "Total:", "", 0, "", false, 0, "")
		pdf.Ln(6)

		pdf.SetFont("Arial", "", 12)
		pdf.CellFormat(60, 10, fmt.Sprintf("%.2f", utils.ConvertNumericToFloat64(ticket.Price)), "", 0, "", false, 0, "")
		pdf.CellFormat(60, 10, strconv.FormatInt(ticket.Quantity, 10), "", 0, "", false, 0, "")
		pdf.CellFormat(30, 10, fmt.Sprintf("%.2f", utils.ConvertNumericToFloat64(ticket.TotalPrice)), "", 1, "", false, 0, "")

		// Move to next section with padding
		pdf.Ln(5)

		// Draw bottom border for each ticket
		pdf.Line(10, pdf.GetY(), 200, pdf.GetY())

		// Move to next line with padding
		pdf.Ln(5)
	}

}

func pdfQRFooter(pdf *gofpdf.Fpdf, orderID int64) {
	url := fmt.Sprintf("%s%s/%d", HOST_URL, URL_ENDPOINT, orderID)

	// Generate the QR code
	png, err := qrcode.Encode(url, qrcode.Medium, 256)
	if err != nil {
		log.Fatalf("Failed to generate QR code: %v", err)
	}

	// Create a temporary file to save the QR code image
	tmpfile, err := ioutil.TempFile("", "qr_*.png")
	if err != nil {
		log.Fatalf("Failed to create temp file: %v", err)
	}
	defer os.Remove(tmpfile.Name())

	// Write the PNG data to the temporary file
	if _, err := tmpfile.Write(png); err != nil {
		log.Fatalf("Failed to write to temp file: %v", err)
	}
	if err := tmpfile.Close(); err != nil {
		log.Fatalf("Failed to close temp file: %v", err)
	}

	// Footer with QR code
	pageWidth, _ := pdf.GetPageSize()
	qrX := (pageWidth - 40) / 2 // Center the QR code
	pdf.Image(tmpfile.Name(), qrX, pdf.GetY(), 40, 0, false, "", 0, "")
	pdf.Ln(45)
	pdf.SetFont("Arial", "", 10)
	pdf.CellFormat(0, 10, "Generated by ticketpass.co", "", 0, "C", false, 0, "")
}

func (s *PDFService) GenerateTicket(attendee queries.GetAttendeeByUserIDRow, tickets []queries.GetTicketsByOrderIDRow) error {
	// Create a new PDF
	pdf := gofpdf.New("P", "mm", "A4", "")

	// Add a page
	pdf.AddPage()

	//Header Fn
	pdfHeader(pdf)

	// Move to next section
	pdf.Ln(20)

	// Attendee Details
	pdfAttendee(pdf, attendee, tickets[0].OrderID)

	// Move to next section
	pdf.Ln(10)

	// Tickets section
	pdfTickets(pdf, tickets)

	//Move To Next Section
	pdf.Ln(10)

	//Footer
	pdfQRFooter(pdf, tickets[0].OrderID)

	// Output PDF to file
	ticketName := fmt.Sprintf("%s-ticket-%d", tickets[0].Name_2, tickets[0].OrderID)
	err := pdf.OutputFileAndClose(fmt.Sprintf("%s.pdf", ticketName))

	if err != nil {
		panic(err)
	}

	return err
}
