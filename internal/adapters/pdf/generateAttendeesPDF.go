package pdf

import (
	"bytes"
	"fmt"

	"github.com/jung-kurt/gofpdf"
	"github.com/kevinkimutai/ticketingapp/internal/app/domain"
)

func pdfEventDetails(pdf *gofpdf.Fpdf, event domain.Event) {

	// Attendee Name and Order ID
	pdf.SetFont("Arial", "B", 12)
	pdf.CellFormat(20, 10, "Name: ", "", 0, "", false, 0, "")
	pdf.SetFont("Arial", "", 12)
	pdf.CellFormat(0, 10, event.Name, "", 1, "", false, 0, "")

	pdf.SetFont("Arial", "B", 12)
	pdf.CellFormat(20, 10, "Date: ", "", 0, "", false, 0, "")
	pdf.SetFont("Arial", "", 12)
	pdf.CellFormat(0, 10, event.Date.Format("02-Jan-2006"), "", 1, "", false, 0, "")

}

func pdfAttendeeTable(pdf *gofpdf.Fpdf, orgs []domain.OrganiserEvent) {
	// Table Headers
	pdf.SetFont("Arial", "B", 12)
	pdf.CellFormat(40, 10, "Full Name", "1", 0, "C", false, 0, "")
	pdf.CellFormat(60, 10, "Email", "1", 0, "C", false, 0, "")
	pdf.CellFormat(50, 10, "Ticket Type", "1", 0, "C", false, 0, "")
	pdf.CellFormat(20, 10, "Quantity", "1", 0, "C", false, 0, "")
	pdf.CellFormat(30, 10, "Total", "1", 1, "C", false, 0, "")

	// Table Rows
	pdf.SetFont("Arial", "", 12)
	for _, org := range orgs {
		pdf.CellFormat(40, 10, org.Fullname, "1", 0, "", false, 0, "")
		pdf.CellFormat(60, 10, org.Email, "1", 0, "", false, 0, "")
		pdf.CellFormat(50, 10, org.TicketTypeName, "1", 0, "", false, 0, "")
		pdf.CellFormat(20, 10, string(org.Quantity), "1", 0, "", false, 0, "")
		pdf.CellFormat(30, 10, fmt.Sprintf("%.2f", org.Total), "1", 1, "", false, 0, "")
	}
}

func (s *PDFService) GenerateAttendeesPDF(orgs []domain.OrganiserEvent, event domain.Event) ([]byte, error) {
	// Create a new PDF
	pdf := gofpdf.New("P", "mm", "A4", "")

	// Add a page
	pdf.AddPage()

	//Header Fn
	pdfHeader(pdf)

	// Move to next section
	pdf.Ln(20)

	//Event Details
	pdfEventDetails(pdf, event)

	// Add Tables for Attendee Details
	pdf.Ln(10)
	pdfAttendeeTable(pdf, orgs)

	pdf.Ln(45)
	pdf.SetFont("Arial", "", 10)
	pdf.CellFormat(0, 10, "Generated by ticketpass.co", "", 0, "C", false, 0, "")

	// Output the PDF as a byte slice
	var buf bytes.Buffer
	err := pdf.Output(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil

}
